// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shukhlyada.Infrastructure;

namespace Shukhlyada.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AccountChannel", b =>
                {
                    b.Property<Guid>("SubscribersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubscriptionsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubscribersId", "SubscriptionsId");

                    b.HasIndex("SubscriptionsId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("AccountComment", b =>
                {
                    b.Property<Guid>("UsersLikedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LikedCommentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LikedCommentsPostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UsersLikedId", "LikedCommentsId", "LikedCommentsPostId");

                    b.HasIndex("LikedCommentsId", "LikedCommentsPostId");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("AccountPost", b =>
                {
                    b.Property<Guid>("LikedPostsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersLikedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LikedPostsId", "UsersLikedId");

                    b.HasIndex("UsersLikedId");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("Shukhlyada.Domain.Models.AccessLevel", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChannelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.ToTable("AccessLevel");
                });

            modelBuilder.Entity("Shukhlyada.Domain.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfilePictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Shukhlyada.Domain.Models.Channel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Shukhlyada.Domain.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id", "PostId");

                    b.HasIndex("AccountId");

                    b.HasIndex("PostId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Shukhlyada.Domain.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ChannelId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Shukhlyada.Domain.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChannelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("PostId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("AccountChannel", b =>
                {
                    b.HasOne("Shukhlyada.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("SubscribersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shukhlyada.Domain.Models.Channel", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountComment", b =>
                {
                    b.HasOne("Shukhlyada.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UsersLikedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shukhlyada.Domain.Models.Comment", null)
                        .WithMany()
                        .HasForeignKey("LikedCommentsId", "LikedCommentsPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountPost", b =>
                {
                    b.HasOne("Shukhlyada.Domain.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("LikedPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shukhlyada.Domain.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UsersLikedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shukhlyada.Domain.Models.AccessLevel", b =>
                {
                    b.HasOne("Shukhlyada.Domain.Models.Account", "Account")
                        .WithMany("PermissionsInChannels")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shukhlyada.Domain.Models.Channel", "Channel")
                        .WithMany("UsersPermissions")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Shukhlyada.Domain.Models.Comment", b =>
                {
                    b.HasOne("Shukhlyada.Domain.Models.Account", "Account")
                        .WithMany("CreatedComments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Shukhlyada.Domain.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Shukhlyada.Domain.Models.Post", b =>
                {
                    b.HasOne("Shukhlyada.Domain.Models.Account", "Account")
                        .WithMany("CreatedPosts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Shukhlyada.Domain.Models.Channel", "Channel")
                        .WithMany("Posts")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Shukhlyada.Domain.Models.Report", b =>
                {
                    b.HasOne("Shukhlyada.Domain.Models.Channel", "ReportedChannel")
                        .WithMany("Reports")
                        .HasForeignKey("ChannelId");

                    b.HasOne("Shukhlyada.Domain.Models.Post", "ReportedPost")
                        .WithMany("Reports")
                        .HasForeignKey("PostId");

                    b.Navigation("ReportedChannel");

                    b.Navigation("ReportedPost");
                });

            modelBuilder.Entity("Shukhlyada.Domain.Models.Account", b =>
                {
                    b.Navigation("CreatedComments");

                    b.Navigation("CreatedPosts");

                    b.Navigation("PermissionsInChannels");
                });

            modelBuilder.Entity("Shukhlyada.Domain.Models.Channel", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Reports");

                    b.Navigation("UsersPermissions");
                });

            modelBuilder.Entity("Shukhlyada.Domain.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
